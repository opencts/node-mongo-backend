{"version":3,"sources":["webpack://node-mongo-backend/webpack/bootstrap","webpack://node-mongo-backend/webpack/runtime/compat get default export","webpack://node-mongo-backend/webpack/runtime/define property getters","webpack://node-mongo-backend/webpack/runtime/global","webpack://node-mongo-backend/webpack/runtime/hasOwnProperty shorthand","webpack://node-mongo-backend/external \"express\"","webpack://node-mongo-backend/external \"cors\"","webpack://node-mongo-backend/external \"mongoose\"","webpack://node-mongo-backend/external \"@babel/runtime/helpers/defineProperty\"","webpack://node-mongo-backend/external \"@babel/runtime/helpers/asyncToGenerator\"","webpack://node-mongo-backend/external \"@babel/runtime/regenerator\"","webpack://node-mongo-backend/external \"@babel/runtime/helpers/classCallCheck\"","webpack://node-mongo-backend/external \"@babel/runtime/helpers/createClass\"","webpack://node-mongo-backend/external \"chalk\"","webpack://node-mongo-backend/./generators/console/log.js","webpack://node-mongo-backend/./generators/http/HttpResponse.js","webpack://node-mongo-backend/./generators/ws/WSResponse.js","webpack://node-mongo-backend/external \"@babel/runtime/helpers/typeof\"","webpack://node-mongo-backend/external \"@babel/runtime/helpers/slicedToArray\"","webpack://node-mongo-backend/./generators/schema/validation.js","webpack://node-mongo-backend/./crud/crud.ctrl.js","webpack://node-mongo-backend/./crud/crud.model.js","webpack://node-mongo-backend/./generators/schema/schemaType.js","webpack://node-mongo-backend/./db.js","webpack://node-mongo-backend/./crud/crud.router.js","webpack://node-mongo-backend/./generators/schema/schema.router.js","webpack://node-mongo-backend/external \"dotenv\"","webpack://node-mongo-backend/external \"express-ws\"","webpack://node-mongo-backend/./index.js"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","require","logger","console","log","info","code","chalk","data","type","HttpResponse","res","route","method","response","status","message","toUpperCase","json","WSResponse","socket","send","JSON","stringify","Schema","mongoose","defaultEmailSchema","String","trim","validate","email","test","match","defaultPasswordSchema","MONGOOSE_VALIDATIONS","getSchemaFromObjectValue","value","fieldSchema","Boolean","getDefaultSchema","Date","typeUpperCase","arr1","arr2","schema","validations","keys","filter","x","includes","forEach","val","foundedMongoValidation","defaultSchema","Number","wsInfo","router","express","model","name","ourSchema","builtSchema","entries","Array","isArray","generateMongoSchema","createModel","req","httpResponse","find","query","params","id","findById","ws","on","msg","wsResponse","newData","parse","save","clients","client","posted","post","body","deleteOne","_id","put","updateOne","global","Text","Email","Password","File","ObjectId","users","password","required","posts","author","ref","at","likes","routes","db","map","it","stringifyAttribute","newSchema","_TYPES_","attr","founded","subAttr","dotenv","app","expressWs","getWss","use","cors","process","env","MONGO_URI","useNewUrlParser","useUnifiedTopology","useFindAndModify","useCreateIndex","err","r","crudCtrl","createCrudRouter","stringifySchema","createSchemaRouter","PORT","listen","_"],"mappings":"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","file":"server.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"express\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"cors\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"mongoose\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"chalk\");","import chalk from 'chalk';\nconst logger = console.log;\n\nexport default {\n    error: (info, code = null) => logger(chalk.red.bold(`${code ? code : 'ERROR'}`, info)),\n    success: info => logger(chalk.green('[SUCCESS]',info)),\n    info: (data, type = '*') => logger(chalk.gray.bold(`${type}`, data)),\n    warning: info => logger(chalk.yellowBright.bold('[WARNING]', info)),\n    strong: info => logger(chalk.blueBright.bold('[*]', info))\n};","import log from \"../console/log\";\n\nexport default class HttpResponse {\n    constructor(res, route, method = 'GET') {\n        this.response = res;\n        this.route = route;\n        this.method = method;\n    }\n\n    /**\n     * Provide the appropriate response object after a request\n     * @param {number} status Response status code\n     * @param {string} message Response message text\n     * @param {object} data Response content object\n     */\n    json(status = 200, data = null, message = 'ok') {\n\n        if (status > 300) {\n            log.error(`[${this.method.toUpperCase()}] /${this.route} : ${message}`, status);\n        } else {\n            log.info(`[${this.method.toUpperCase()}] /${this.route} : Data sent with success`, status);\n        }\n\n        return this.response.status(status).json({\n            status,\n            message,\n            data\n        });\n    }\n}\n","import log from \"../console/log\";\n\nexport default class WSResponse {\n    /**\n     * @param {string} route Current route\n     * @param {string} method POST or DELETE\n     */\n    constructor(route, method) {\n        this.route = route;\n        this.method = method;\n    }\n\n    /**\n     * Provide the appropriate response object after a request\n     * @param {object} socket The client socket\n     * @param {number} status Response status code\n     * @param {string} message Response message text\n     * @param {object} data Response content object\n     */\n    json(socket, status = 200, data = null, message = 'ok') {\n\n        if (status > 300) {\n            log.error(`[WS:${this.method.toUpperCase()}] /${this.route} : ${message}`, status);\n        } else {\n            log.info(`[WS:${this.method.toUpperCase()}] /${this.route} : Data sent with success`, status);\n        }\n\n        return socket.send(JSON.stringify({\n            status,\n            message,\n            data\n        }));\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/typeof\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/slicedToArray\");","import mongoose from 'mongoose';\nconst { Schema } = mongoose;\nvar validateEmail = function (email) {\n    var re = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    return re.test(email)\n};\n\n// default email schema\nlet defaultEmailSchema = {\n    type: String,\n    trim: true,\n    //lowercase: true,\n    //unique: true,\n    //required: true,\n    validate: [validateEmail, 'Please provide a valid email address'],\n    match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/, 'Please fill a valid email address']\n}\n\n// default password schema\nlet defaultPasswordSchema = {\n    type: String,\n    match: /.{4,}/\n}\n\n// Mongoose default validations\nconst MONGOOSE_VALIDATIONS = {\n    \"STRING\": ['minlength', 'maxlength', 'match', 'enum', 'uppercase', 'lowercase', 'trim', 'required', 'validate', 'default'],\n    \"NUMBER\": ['min', 'max', 'enum', 'required', 'validate', 'default'],\n    \"DATE\": ['min', 'max', 'required', 'validate', 'default']\n}\n\n// get intersection of array\nconst arrIntersection = (arr1, arr2) => {\n    return arr1.filter(x => arr2.includes(x))\n}\n\n/**\n * \n * @param {object} ourSchema  like a mongo schema with \n * {File : input file, Text: input text, Number for input number }\n * @returns object that is mongoose schema\n */\nconst generateMongoSchema = (ourSchema) => {\n    let builtSchema = {}\n    for (const [key, value] of Object.entries(ourSchema)) {\n        if (value !== null && typeof value === 'object' && !Array.isArray(value)) {\n            builtSchema = { ...builtSchema, [key]: getSchemaFromObjectValue(value) }\n        } else if (Array.isArray(value)) {\n            builtSchema = { ...builtSchema, [key]: value }\n        } else {\n            builtSchema = { ...builtSchema, [key]: getDefaultSchema(value) }\n        }\n    }\n    return new Schema(builtSchema)\n}\n\n\nfunction getSchemaFromObjectValue(value) {\n    const type = value['type']\n    let fieldSchema = {}\n    if (type === 'Email' || type === 'Text' || type === String || type === Boolean)\n        fieldSchema = { ...value, ...getDefaultSchema(type) }\n    if (type === 'Password' || type === 'File' || type === Date) {\n        const typeUpperCase = type === Date ? 'DATE' : 'STRING';\n        fieldSchema = getDefaultSchema(type)\n        fieldSchema = { ...fieldSchema, ...foundedMongoValidation(value, typeUpperCase) }\n    }\n    if (type === mongoose.Types.ObjectId)\n        fieldSchema = { ...value }\n\n    return fieldSchema\n}\n\nfunction foundedMongoValidation(obj, type) {\n    let schema = {}\n    let validations = Object.keys(obj)\n    let foundedValidations = arrIntersection(validations, MONGOOSE_VALIDATIONS[type])\n    foundedValidations.forEach((val) => {\n        schema[val] = obj[val]\n    })\n    return schema\n}\n\nfunction getDefaultSchema(type) {\n    let defaultSchema = {}\n    switch (type) {\n        case 'Text':\n            defaultSchema = { type: String };\n            break;\n        case 'Email':\n            defaultSchema = defaultEmailSchema;\n            break;\n        case 'Password':\n            defaultSchema = defaultPasswordSchema\n            break;\n        case 'File':\n            defaultSchema = { type: String }\n            break;\n        case Number:\n            defaultSchema = { type: Number }\n            break;\n        case Date:\n            defaultSchema = { type: Date }\n            break;\n        case Boolean:\n            defaultSchema = { type: Boolean }\n            break;\n        case String:\n            defaultSchema = { type: String }\n            break;\n    }\n\n    return defaultSchema;\n}\n\nexport default generateMongoSchema;","import express from 'express';\nimport HttpResponse from '../generators/http/HttpResponse';\nimport WSResponse from '../generators/ws/WSResponse';\nimport createModel from './crud.model';\n\nfunction crudCtrl(route, wsInfo) {\n    const router = express.Router();\n    const model = createModel(route);\n\n    router.get('/', async (req, res) => {\n        const httpResponse = new HttpResponse(res, route.name);\n        try {\n            const data = await model.find({ ...req.query });\n            res.status(200).json(data);\n            httpResponse.json(200, data);\n        } catch (e) {\n            httpResponse.json(500, null, 'Unable to read data');\n        }\n    });\n\n    router.get('/:id', async (req, res) => {\n        const httpResponse = new HttpResponse(res, route.name + '/' + req.params.id);\n        try {\n            const data = await model.findById(req.params.id)\n            if (!data) {\n                httpResponse.json(404, null, 'Resource not found.')\n            } else {\n                httpResponse.json(200, data);\n            }\n        } catch (e) {\n            httpResponse.json(500, null, e.message);\n        }\n    });\n\n    router.ws('/post', (ws, req) => {\n        ws.on('message', async msg => {\n            const wsResponse = new WSResponse(route.name, 'post');\n            try {\n                const newData = new model(JSON.parse(msg));\n                await newData.save();\n                console.log(newData);\n                wsInfo.clients.forEach(client => {\n                    wsResponse.json(client, 200, {\n                        route: route.name,\n                        posted: newData\n                    });\n                });\n            } catch (e) {\n                wsInfo.clients.forEach(client => {\n                    wsResponse.json(client, 500, null, e.message);\n                });\n            }\n        });\n    });\n\n    router.post('/', async (req, res) => {\n        const httpResponse = new HttpResponse(res, route.name + '/' + req.params.id);\n        try {\n            const newData = new model({ ...req.body });\n            console.log(req.body, newData);\n            await newData.save();\n            httpResponse.json(201, newData, 'Item created!');\n        } catch (e) {\n            httpResponse.json(201, null, e.message);\n        }\n    });\n\n    router.delete('/:id', async (req, res) => {\n        try {\n            await model.deleteOne({ _id: req.params.id })\n            res.status(200).json({ message: 'Item deleted!' });\n        } catch (e) {\n            res.status(422).json(e)\n        }\n    });\n\n    router.put('/:id', async (req, res) => {\n        delete req.body._id;\n        try {\n            await model.updateOne({ _id: req.params.id }, { ...req.body })\n            res.status(200).json({ message: 'Item Updated!' });\n        } catch (e) {\n            res.status(422).json(e)\n        }\n    });\n\n    return router;\n}\nexport default crudCtrl;","import mongoose from 'mongoose'\nimport generateMongoSchema from '../generators/schema/validation';\n\nexport default function createModel(route) {\n    return mongoose.model(route.name, generateMongoSchema(route.schema))\n}","import mongoose from 'mongoose';\n\nglobal.Text = 'Text'; // Store String that correspond to mongo String dataType\nglobal.Email = 'Email'; // Store email \nglobal.Password = 'Password'; // Store password \nglobal.File = 'File'; // Store file but it uploadUrl in mongo db,\nglobal.Date = Date;\nglobal.Number = Number;\nglobal.Boolean = Boolean;\nglobal.ObjectId = mongoose.Types.ObjectId;\n\nexport default {}; ","import './generators/schema/schemaType';\n\nexport default {\n    users: {\n        email: Email,\n        password: Password,\n        name: {\n            required: true,\n            type: Text\n        }\n    },\n    posts: {\n        author: {\n            type: ObjectId,\n            ref: 'users'\n        },\n        message: Text,\n        at: Date,\n        likes: Number\n    }\n};","import crudCtrl from \"./crud.ctrl\";\nimport db from \"../db\";\n\nconst dbValues = Object.entries(db);\n\nconst routes = dbValues.map(it => ({ name: it[0], schema: it[1] }));\n\nfunction createCrudRouter(app, wsInfo) {\n    for (const r of routes) {\n        app.use('/api/' + r.name, crudCtrl(r, wsInfo))\n    }\n    \n}\n\nexport default createCrudRouter;","import express from 'express';\nimport db from '../../db';\nimport HttpResponse from '../http/HttpResponse';\nimport mongoose from 'mongoose';\n\nfunction stringifyAttribute(schema) {\n    const newSchema = {};\n    const _TYPES_ = {\n        'Date': Date,\n        'Number': Number,\n        'Boolean': Boolean,\n        'ObjectId': mongoose.Types.ObjectId,\n    };\n    for (const attr in schema) {\n        let founded = false;\n        for (const subAttr in _TYPES_) {\n            if (schema[attr] === _TYPES_[subAttr]) {\n                newSchema[attr] = subAttr;\n                founded = true;\n                break;\n            } else {\n                if (schema[attr].type && schema[attr].type === _TYPES_[subAttr]) {\n                    newSchema[attr] = { ...schema[attr], type: subAttr };\n                    founded = true;\n                    break;\n                }\n            }\n        }\n        if (!founded) {\n            newSchema[attr] = schema[attr];\n        }\n    }\n    return newSchema;\n}\n\nfunction stringifySchema(schema) {\n    const newSchema = {};\n    for (const attr in schema) {\n        newSchema[attr] = stringifyAttribute(schema[attr]);\n    }\n    return newSchema;\n}\n\n\nfunction createSchemaRouter(app) {\n    const router = express.Router();\n\n    router.get('/', (req, res) => {\n        const httpResponse = new HttpResponse(res, 'schema');\n        httpResponse.json(200, stringifySchema(db));\n    });\n\n    router.get('/:name', (req, res) => {\n        const name = req.params.name;\n        const httpResponse = new HttpResponse(res, 'schema/' + name);\n        if (!(name in db)) {\n            httpResponse.json(404, null, 'The collection name provided does not exists');\n        } else {\n            httpResponse.json(200, db[name]);\n        }\n    });\n\n    app.use('/api/schema', router);\n}\n\nexport default createSchemaRouter;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"dotenv\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"express-ws\");","import express from 'express';\nimport cors from 'cors';\nimport mongoose from 'mongoose';\nimport createCrudRouter from './crud/crud.router';\nimport log from './generators/console/log';\nimport createSchemaRouter from './generators/schema/schema.router';\nimport dotenv from 'dotenv';\nimport expressWs from 'express-ws';\n\ndotenv.config();\n\nconst app = express();\nconst wsInfo = expressWs(app).getWss();\napp.use(cors());\napp.use(express.json());\n\nmongoose.connect(process.env.MONGO_URI, {\n\tuseNewUrlParser: true,\n\tuseUnifiedTopology: true,\n\tuseFindAndModify: false,\n\tuseCreateIndex: true\n}).catch((err) => log.error('Unable to connect to Mongo database'));\n\ncreateCrudRouter(app, wsInfo);\ncreateSchemaRouter(app);\n\nconst PORT = process.env.PORT || 4300\napp.listen(PORT, _ => log.success('Server is started'))"],"sourceRoot":""}